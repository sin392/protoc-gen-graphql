directive @DataOneof1 on INPUT_FIELD_DEFINITION
directive @Service on FIELD_DEFINITION
directive @Test on FIELD_DEFINITION
directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
type Data {
	"""
	 must be required
	
	"""
	stringX: String!
	"""
	 must be required
	
	"""
	foo: Foo2!
	"""
	 must be required because its greater than 0
	
	"""
	double: [Float!]!
	"""
	 simple
	
	"""
	string2: String
	"""
	 simple
	
	"""
	foo2: Foo2
	"""
	 simple
	
	"""
	double2: [Float!]
	bars: String @goField(name: "Bar")
	str: String @goField(name: "String_")
	Oneof3: DataOneof1
}
input DataInput {
	"""
	 must be required
	
	"""
	stringX: String!
	"""
	 must be required
	
	"""
	foo: Foo2Input!
	"""
	 must be required because its greater than 0
	
	"""
	double: [Float!]!
	"""
	 simple
	
	"""
	string2: String
	"""
	 simple
	
	"""
	foo2: Foo2Input
	"""
	 simple
	
	"""
	double2: [Float!]
	bars: String @goField(name: "Bar")
	str: String @goField(name: "String_")
	param1: String @DataOneof1
	param2: String @DataOneof1
}
union DataOneof1 = Data_Param1 | Data_Param2
type Data_Param1 {
	param1: String
}
type Data_Param2 {
	param2: String
}
type Foo2 {
	param1: String
}
input Foo2Input {
	param1: String
}
type Mutation {
	"""
	 must be a mutation
	
	"""
	serviceMutate1(in: DataInput): Data
	"""
	 must be a mutation
	
	"""
	serviceMutate2(in: DataInput): Data
	"""
	 must be a mutation
	
	"""
	servicePublish(in: DataInput): Data
	"""
	 must be a mutation and a subscription
	
	"""
	servicePubSub1(in: DataInput): Data
	serviceInvalidSubscribe3(in: DataInput): Data
	servicePubSub2(in: DataInput): Data
	newName(in: DataInput): Data
	"""
	 expect service name to be "name"
	
	"""
	name: Boolean
	"""
	 expect service name to be "newName1" since it collides with a name from a different service
	
	"""
	newName0: Boolean
}
type Query {
	serviceQuery1(in: DataInput): Data
	serviceInvalidSubscribe1(in: DataInput): Data
}
type Subscription {
	"""
	 must be a subscription
	
	"""
	serviceSubscribe(in: DataInput): Data
	"""
	 must be a mutation and a subscription
	
	"""
	servicePubSub1(in: DataInput): Data
	serviceInvalidSubscribe2(in: DataInput): Data
	serviceInvalidSubscribe3(in: DataInput): Data
	servicePubSub2(in: DataInput): Data
}
