syntax = "proto3";

package example;

import "proto/graphql/option.proto";

option go_package = "github.com/sin392/protoc-gen-graphql/example";

service Service {
  rpc Mutate1(Data) returns (Data); // must be a mutation
  rpc Mutate2(Data) returns (Data); // must be a mutation
  rpc Query1(Data) returns (Data) {
    option (proto.graphql.rpc) = {type: QUERY};
  } // must be a query

  rpc Publish(stream Data) returns (Data); // must be a mutation
  rpc Subscribe(Data) returns (stream Data); // must be a subscription
  rpc PubSub1(stream Data) returns (stream Data); // must be a mutation and a subscription

  rpc InvalidSubscribe1(stream Data) returns (Data) {
    option (proto.graphql.rpc) = {type: QUERY};
  }
  rpc InvalidSubscribe2(Data) returns (stream Data) {
    option (proto.graphql.rpc) = {type: MUTATION};
  }
  rpc InvalidSubscribe3(stream Data) returns (stream Data) {
    option (proto.graphql.rpc) = {type: QUERY};
  }
  rpc PubSub2(stream Data) returns (stream Data) {
    option (proto.graphql.rpc) = {type: DEFAULT};
  }

  rpc Ignore(Data) returns (Data) {
    option (proto.graphql.rpc) = {ignore: true};
  }

  rpc Name(Data) returns (Data) {
    option (proto.graphql.rpc) = {name: "newName"};
  }
}

message Request {}

message Response {}

service Test {
  option (proto.graphql.svc) = {
    name: ""
    upstream: UPSTREAM_CLIENT
  }; // expect gqlgen TestResolvers.Service to be a Client not a Server.

  rpc Name(Request) returns (Response); // expect service name to be "name"
  rpc NewName(Request) returns (Response); // expect service name to be "newName1" since it collides with a name from a different service
}

// service Query {
//   option (proto.graphql.svc) = {
//     type: QUERY
//     upstream: UPSTREAM_SERVER
//   }; // expect gqlgen QueryResolvers.Service to be a Server not a Client.
//   rpc Query1(Data) returns (Data); // must be a query
//   rpc Query2(Data) returns (Data); // must be a query
//   rpc Mutate1(Data) returns (Data) {
//     option (proto.graphql.rpc) = {type: MUTATION};
//   } // must be a mutation
//   rpc Subscribe(Data) returns (stream Data); // must be a subscription
// }

message Data {
  string string_x = 1 [(proto.graphql.field) = {required: true}]; // must be required
  Foo2 foo = 2 [(proto.graphql.field) = {required: true}]; // must be required
  repeated double double = 3 [(proto.graphql.field) = {required: true}]; // must be required because its greater than 0
  string string2 = 4; // simple
  Foo2 foo2 = 5; // simple
  repeated double double2 = 6; // simple
  string bar = 7 [(proto.graphql.field) = {name: "bars"}];
  string string = 8 [(proto.graphql.field) = {name: "str"}];
  string ignore = 9 [(proto.graphql.field) = {ignore: true}];
  oneof oneof1 {
    string param1 = 10;
    string param2 = 11;
    option (proto.graphql.oneof) = {name: "Oneof3"};
  }
  oneof oneof2 {
    string param3 = 13;
    option (proto.graphql.oneof) = {ignore: true};
  }
}

message Foo2 {
  string param1 = 1;
}
