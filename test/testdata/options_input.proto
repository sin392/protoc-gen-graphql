syntax = "proto3";

package test.testdata;

import "proto/graphql/option.proto";

option go_package = "github.com/sin392/protoc-gen-graphql/example";

service Service {
  rpc Mutate1(Data) returns (Data); // must be a mutation
  rpc Mutate2(Data) returns (Data); // must be a mutation
  rpc Query1(Data) returns (Data) {
    option (proto.graphql.rpc) = {type: QUERY};
  } // must be a query

  rpc Publish(stream Data) returns (Data); // must be a mutation
  rpc Subscribe(Data) returns (stream Data); // must be a subscription
  rpc PubSub1(stream Data) returns (stream Data); // must be a mutation and a subscription

  rpc InvalidSubscribe1(stream Data) returns (Data) {
    option (proto.graphql.rpc) = {type: QUERY};
  }
  rpc InvalidSubscribe2(Data) returns (stream Data) {
    option (proto.graphql.rpc) = {type: MUTATION};
  }
  rpc InvalidSubscribe3(stream Data) returns (stream Data) {
    option (proto.graphql.rpc) = {type: QUERY};
  }
  rpc PubSub2(stream Data) returns (stream Data) {
    option (proto.graphql.rpc) = {type: DEFAULT};
  }

  rpc Ignore(Data) returns (Data) {
    option (proto.graphql.rpc) = {ignore: true};
  }

  rpc Name(Data) returns (Data) {
    option (proto.graphql.rpc) = {name: "newName"};
  }
}

service Test {
  rpc Name(Data) returns (Data); // expect service name to be "name"
  rpc NewName(Data) returns (Data); // expect service name to be "newName1" since it collides with a name from a different service

  option (proto.graphql.svc) = {name: ""};
}

service Query {
  option (proto.graphql.svc) = {type: QUERY};
  rpc Query1(Data) returns (Data); // must be a query
  rpc Query2(Data) returns (Data); // must be a query
  rpc Mutate1(Data) returns (Data) {
    option (proto.graphql.rpc) = {type: MUTATION};
  } // must be a mutation
  rpc Subscribe(Data) returns (stream Data); // must be a subscription
}

message Data {
  string string_x = 1 [(proto.graphql.field) = {required: true}]; // must be required
  Foo2 foo = 2 [(proto.graphql.field) = {required: true}]; // must be required
  repeated double double = 3 [(proto.graphql.field) = {required: true}]; // must be required because its greater than 0
  string string2 = 4; // simple
  Foo2 foo2 = 5; // simple
  repeated double double2 = 6; // simple
  string bar = 7 [(proto.graphql.field) = {name: "bars"}];
  string string = 8 [(proto.graphql.field) = {name: "str"}];
  string ignore = 9 [(proto.graphql.field) = {ignore: true}];
}

message Foo2 {
  string param1 = 1;
}
